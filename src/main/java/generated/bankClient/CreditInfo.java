// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `bankClient.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package generated.bankClient;

public class CreditInfo implements java.lang.Cloneable,
                                   java.io.Serializable
{
    public CurrencyType baseCurrencyType;

    public double baseCreditCost;

    public CurrencyType foreignCurrencyType;

    public double foreignCreditCost;

    public CreditInfo()
    {
        this.baseCurrencyType = CurrencyType.PLN;
        this.foreignCurrencyType = CurrencyType.PLN;
    }

    public CreditInfo(CurrencyType baseCurrencyType, double baseCreditCost, CurrencyType foreignCurrencyType, double foreignCreditCost)
    {
        this.baseCurrencyType = baseCurrencyType;
        this.baseCreditCost = baseCreditCost;
        this.foreignCurrencyType = foreignCurrencyType;
        this.foreignCreditCost = foreignCreditCost;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CreditInfo r = null;
        if(rhs instanceof CreditInfo)
        {
            r = (CreditInfo)rhs;
        }

        if(r != null)
        {
            if(this.baseCurrencyType != r.baseCurrencyType)
            {
                if(this.baseCurrencyType == null || r.baseCurrencyType == null || !this.baseCurrencyType.equals(r.baseCurrencyType))
                {
                    return false;
                }
            }
            if(this.baseCreditCost != r.baseCreditCost)
            {
                return false;
            }
            if(this.foreignCurrencyType != r.foreignCurrencyType)
            {
                if(this.foreignCurrencyType == null || r.foreignCurrencyType == null || !this.foreignCurrencyType.equals(r.foreignCurrencyType))
                {
                    return false;
                }
            }
            if(this.foreignCreditCost != r.foreignCreditCost)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::bankClient::CreditInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, baseCurrencyType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, baseCreditCost);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, foreignCurrencyType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, foreignCreditCost);
        return h_;
    }

    public CreditInfo clone()
    {
        CreditInfo c = null;
        try
        {
            c = (CreditInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        CurrencyType.ice_write(ostr, this.baseCurrencyType);
        ostr.writeDouble(this.baseCreditCost);
        CurrencyType.ice_write(ostr, this.foreignCurrencyType);
        ostr.writeDouble(this.foreignCreditCost);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.baseCurrencyType = CurrencyType.ice_read(istr);
        this.baseCreditCost = istr.readDouble();
        this.foreignCurrencyType = CurrencyType.ice_read(istr);
        this.foreignCreditCost = istr.readDouble();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CreditInfo v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CreditInfo ice_read(com.zeroc.Ice.InputStream istr)
    {
        CreditInfo v = new CreditInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CreditInfo> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CreditInfo v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CreditInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CreditInfo.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CreditInfo _nullMarshalValue = new CreditInfo();

    public static final long serialVersionUID = -1995835753L;
}
