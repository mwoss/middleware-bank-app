// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `bankClient.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package generated.bankClient;

public class CreditInfo extends com.zeroc.Ice.Value
{
    public CreditInfo()
    {
        this.baseCurrencyType = CurrencyType.PLN;
        this.foreignCurrencyType = CurrencyType.PLN;
    }

    public CreditInfo(CurrencyType baseCurrencyType, double baseCreditCost, CurrencyType foreignCurrencyType, double foreignCreditCost)
    {
        this.baseCurrencyType = baseCurrencyType;
        this.baseCreditCost = baseCreditCost;
        this.foreignCurrencyType = foreignCurrencyType;
        this.foreignCreditCost = foreignCreditCost;
    }

    public CurrencyType baseCurrencyType;

    public double baseCreditCost;

    public CurrencyType foreignCurrencyType;

    public double foreignCreditCost;

    public CreditInfo clone()
    {
        return (CreditInfo)super.clone();
    }

    public static String ice_staticId()
    {
        return "::bankClient::CreditInfo";
    }

    @Override
    public String ice_id()
    {
        return ice_staticId();
    }

    public static final long serialVersionUID = -1654197363L;

    @Override
    protected void _iceWriteImpl(com.zeroc.Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, true);
        CurrencyType.ice_write(ostr_, baseCurrencyType);
        ostr_.writeDouble(baseCreditCost);
        CurrencyType.ice_write(ostr_, foreignCurrencyType);
        ostr_.writeDouble(foreignCreditCost);
        ostr_.endSlice();
    }

    @Override
    protected void _iceReadImpl(com.zeroc.Ice.InputStream istr_)
    {
        istr_.startSlice();
        baseCurrencyType = CurrencyType.ice_read(istr_);
        baseCreditCost = istr_.readDouble();
        foreignCurrencyType = CurrencyType.ice_read(istr_);
        foreignCreditCost = istr_.readDouble();
        istr_.endSlice();
    }
}
