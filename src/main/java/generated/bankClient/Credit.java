// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `bankClient.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package generated.bankClient;

public class Credit implements java.lang.Cloneable,
                               java.io.Serializable
{
    public double cost;

    public Date startDate;

    public Date endDate;

    public CurrencyType currencyType;

    public Credit()
    {
        this.startDate = new Date();
        this.endDate = new Date();
        this.currencyType = CurrencyType.PLN;
    }

    public Credit(double cost, Date startDate, Date endDate, CurrencyType currencyType)
    {
        this.cost = cost;
        this.startDate = startDate;
        this.endDate = endDate;
        this.currencyType = currencyType;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Credit r = null;
        if(rhs instanceof Credit)
        {
            r = (Credit)rhs;
        }

        if(r != null)
        {
            if(this.cost != r.cost)
            {
                return false;
            }
            if(this.startDate != r.startDate)
            {
                if(this.startDate == null || r.startDate == null || !this.startDate.equals(r.startDate))
                {
                    return false;
                }
            }
            if(this.endDate != r.endDate)
            {
                if(this.endDate == null || r.endDate == null || !this.endDate.equals(r.endDate))
                {
                    return false;
                }
            }
            if(this.currencyType != r.currencyType)
            {
                if(this.currencyType == null || r.currencyType == null || !this.currencyType.equals(r.currencyType))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::bankClient::Credit");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, cost);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, startDate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, endDate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, currencyType);
        return h_;
    }

    public Credit clone()
    {
        Credit c = null;
        try
        {
            c = (Credit)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeDouble(this.cost);
        Date.ice_write(ostr, this.startDate);
        Date.ice_write(ostr, this.endDate);
        CurrencyType.ice_write(ostr, this.currencyType);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.cost = istr.readDouble();
        this.startDate = Date.ice_read(istr);
        this.endDate = Date.ice_read(istr);
        this.currencyType = CurrencyType.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Credit v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Credit ice_read(com.zeroc.Ice.InputStream istr)
    {
        Credit v = new Credit();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Credit> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Credit v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Credit> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Credit.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Credit _nullMarshalValue = new Credit();

    public static final long serialVersionUID = -1962732350L;
}
